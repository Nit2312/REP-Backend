// Tasks CRUD API
// List all tasks
app.get('/api/tasks', async (req, res) => {
  try {
    const result = await pool.query('SELECT * FROM tasks ORDER BY id DESC');
    res.status(200).json(result.rows);
  } catch (error) {
    console.error('Error fetching tasks:', error);
    res.status(500).json({ message: 'Server error', error: error.message });
  }
});

// Create a new task
app.post('/api/tasks', async (req, res) => {
  try {
    const { name, description, machine_id, mould_id, product_id, color_mix_id, worker_id, target, status = 'pending', created_by } = req.body;
    if (!name || !machine_id || !mould_id || !product_id || !color_mix_id || !worker_id || target === undefined) {
      return res.status(400).json({ message: 'Missing required fields' });
    }
    const result = await pool.query(
      'INSERT INTO tasks (name, description, machine_id, mould_id, product_id, color_mix_id, worker_id, target, status, created_by) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10) RETURNING *',
      [name, description || null, machine_id, mould_id, product_id, color_mix_id, worker_id, target, status, created_by || null]
    );
    res.status(201).json(result.rows[0]);
  } catch (error) {
    console.error('Error creating task:', error);
    res.status(500).json({ message: 'Server error', error: error.message });
  }
});

// Update a task
app.put('/api/tasks/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const { name, description, machine_id, mould_id, product_id, color_mix_id, worker_id, target, status } = req.body;
    if (!name || !machine_id || !mould_id || !product_id || !color_mix_id || !worker_id || target === undefined) {
      return res.status(400).json({ message: 'Missing required fields' });
    }
    const result = await pool.query(
      'UPDATE tasks SET name = $1, description = $2, machine_id = $3, mould_id = $4, product_id = $5, color_mix_id = $6, worker_id = $7, target = $8, status = $9, updated_at = CURRENT_TIMESTAMP WHERE id = $10 RETURNING *',
      [name, description || null, machine_id, mould_id, product_id, color_mix_id, worker_id, target, status, id]
    );
    if (result.rowCount === 0) {
      return res.status(404).json({ message: 'Task not found' });
    }
    res.status(200).json(result.rows[0]);
  } catch (error) {
    console.error('Error updating task:', error);
    res.status(500).json({ message: 'Server error', error: error.message });
  }
});

// Delete a task
app.delete('/api/tasks/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const result = await pool.query('DELETE FROM tasks WHERE id = $1', [id]);
    if (result.rowCount === 0) {
      return res.status(404).json({ message: 'Task not found' });
    }
    res.status(204).send();
  } catch (error) {
    console.error('Error deleting task:', error);
    res.status(500).json({ message: 'Server error', error: error.message });
  }
});
